/* 2022-02-03(목) */

6. 프로젝트 구조
	a. src/main/java
		- 여태까지 사용하던 Java 소스 폴더
	b. src/main/resources
		- Java 소스 이외의 자원을 넣는 폴더
		- 설정 파일 등 
	c. src/test/java
		- JUnit 등 테스트용 소스 폴더
	d. src/test/resources
		- JUnit 등 테스트용 자원 폴더	
	e. JRE System Library
		- JRE jar
	f. Maven Dependencies
		- 메이븐(빌드도구 + 라이브러리 관리도구 등)
		- 메이븐 라이브러리
		- jar 관리 목적! ***
	g. src
		- a~d까지의 실제 폴더(물리적 표현)
		k. src > main > webapp
			- Dynamic Web Project 구조와 동일
		l. src > main > webapp > WEB-INF
			- classes : 컴파일 실행 결과물 저장 폴더 > X
			- spring : 스프링 환경 설정
				- root-context.xml : 스프링 전체 환경
				- appServlet > servlet-context.xml : 요청 환경 설정
			- views : 뷰폴더
	h. target
		- X
	i. pom.xml
		- 메이븐 설정 파일
		- 라이브러리 관리 파일 
		
		
		
스프링 프레임워크, Spring Framework
- https://spring.io
- Spring 3.XX ~ 5.XX
- 스프링 프레임워크는 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크이다.
- 전자 정부 표준 프레임워크로 채택
- 세팅된 개발 환경 제공 + 생산성 + 개발 편의성 + 유지/보수성 + 협업 + 대형화 프로젝트 등..



스프링 프레임워크 구성 요소
1. 의존서 주입 지원(DI)
2. 관점 지향 프로그래밍 지원(AOP)
3. Spring MVC 지원(***)
4. 레이아웃 지원(Tiles)
5. 데이터베이스 연동 지원
	- JDBC 연동
	- Spring JDBC 연동
	- ORM 등 .. 지원
	- MyBatis 연동



스프링 DI
- Dependency Injection
- 의존(성) 주입
- 스프링에서 아주 중요한 개념 중 하나
- 디자인 패턴 중 하나를 스프링에서 구현한 기술
- 프로그래밍에서 *구성 요소간은 의존 관계가 소스 내부가 아닌 외부 환경*에 의해서 정의되게 하는 디자인 패턴
- 하나의 객체가 자신의 기능을 실행하기 위해 반드시 다른 특정 객체가 필요한 경우, 
	그 특정 객체를 자신이 직접 생성하지 않고 외부로부터 건내받아 생성하는 경우를 의존주입이라고 한다.



- 원래 패키지에는 숫자를 적으면 안되나.. 예제니 사용
- "com.test.spring.di01"
	- Ex01.java
	- Pen.java
	- Hong.java
	- Lee.java
	- Brush.java
	
	
- "com.test.spring.di02"
	- Ex02.java
	- Pen.java
	- Hong.java


- "com.test.spring.di02"
	- Ex03.java
	- AAA.java
	- BBB.java
	- CCC.java
	- DDD.java
	- di03.xml











